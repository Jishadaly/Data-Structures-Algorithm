 const selectionSort=(arr)=>{
    let n=arr.length;
    let min;
    for(let i=0;i<n-1;i++){
        min=i
        for(let j=i+1;j<n;j++){
            if(arr[j]<arr[min]){
                min=j
            }
        }
        let temp=arr[i];
        arr[i]=arr[min];
        arr[min]=temp
    }
    return arr
}
let arr=[6.9,-1,7]
console.log(selectionSort(arr));


 class Node{
    constructor(value){
        this.value = value;
        this.next = null;
    }
}

class Stack{
    constructor(){
        this.top = null;
    }

    push(value){
        let node = new Node(value);
        if(!this.top){
            this.top = node;
        } else {
            let curr = this.top;
            this.top = node;
            this.top.next = curr
        }
    }

    pop(){
        if(!this.top){
            return null
        } else {
            this.top = this.top.next
        }
    }

    print(){
        let curr = this.top;
        let resultStack = '';
        while(curr){
            resultStack += `${curr.value} `;
            curr = curr.next;
        }
        console.log(resultStack);
    }
}

let s = new Stack();
s.push(1)
s.push(2)
s.push(3)
s.push(4)
s.print()
s.pop()
s.print()
[7:56 PM, 1/18/2024] Nayna: ith stack




 class Node{
    constructor(value){
        this.value = value;
        this.next = null;
    }
}

class Queue{
    constructor(){
        this.first = null;
        this.last = null;
    }

    enqueue(value){
        let node = new Node(value);
        if(!this.first){
            this.first = node;
            this.last = node;
        } else {
            this.last.next = node;
            this.last = node
        }
    }

    dequeue(){
        if(!this.first){
            return null;
        } else {
            this.first = this.first.next 
        }
    }

    print(){
        let curr = this.first;
        let result = '';
        while(curr){
            result += `${curr.value} `;
            curr = curr.next;
        }
        console.log(result);
    }
}

let q = new Queue();
q.enqueue(10);
q.enqueue(20);
q.enqueue(30);
q.enqueue(40);
q.print()
q.enqueue(50)
q.dequeue()
q.print()


  set(key,value){
    const index = this.hash(key)
    let bucket = this.table[index]
    if (!bucket) {
       this.table[index] = [[key,value]]
    }else{
      let sameKeyItem = bucket.find(item => item[0] === key)
      if (sameKeyItem) {
         sameKeyItem[1] = value
      }else{
        bucket.push([key,value])
      }
    }
  }

    hash(key){
    let total
    for( let i=0;i<key.length;i++){
       total += key.charCodeAt(i)
    }
    return total % this.size
  }

  class Node {
     constructor(value){
        this.value = value
        this.next = null
     }
  }

  class BinarySearchTree {
     constructor(){
        this.root = null
     }
     isEmpty(){
        return this.rtoot === null
     }
     insert(value){
        const node = new Node(value)
        if(this.isEmpty()){
            this.root = node
        }else{
            this.insertNode(this.root , value)
        }
     }

     insertNode(root , value){
        if(root < value){
            if(root.left === null){
                this.left = value
            }else{
                this.insertNode(this.left , value)
            }
        }else{
            if(this.right === null ){
                this.right = value
            }else{
                this.insertNode(root.right , value)
            }
        }
     }
     search(root , value){
        if(!root){
            return false
        }else{
            if( root.value === value ){
                return tree
            }else if(root.value < value)
            {
                return this.search(root.left , value)
            }else{
                return this.search(root.right , value)
            }
        }
     }
  }


  class Node {
    constructor(value){
        this.value = value
        this.left = null
        this.right = null
    }
  }

  class BinarySearchTree{
    constructor(){
        this.root = null
    }

    isEmpty(){
        return the.root === null
    }

    insert(value){
        const node = new Node(value)
        if(this.isEmpty()) {
            this.root = node
        }else{
            this.insertNode(this.root , node)
        }
    }
    insertNode(root , node){
        if(root.value < node.value){
            if(root.left === null ){
                root.left = node
            } else {
                this.insertNode(root.left , node)
            }
        }else {
            if(root.right === null ) {
                root.right = node
            }else {
                this.insertNode(root.right , node)
            }
        }
    }

    search(root, value){
        if(!root){
            return false
        }else{
            if(root.value === value){
                return true
            }else if(root.value < value){
                return this.search(root.left ,value)
            }else{
                return this.search(root.right , value)
            }
        }

    }
    preOrder(root) {
        if(root){
            console.log(root.value)
            this.preOrder(root.left)
            this.preOrder(root.right)
        }
    }


    inOrder(root){
        if(root){
            this.inOrder(root.left)
            conslole.log(root.value)
            this.inOrder(root.root)
        }
    }


    postOrder(root){
        if(root){
            this.postOrder(root.left)
            console.log(root.value)
            this.postOrder(root.right)
        }
    }

    levelOrder(){
        const queue = []
        queue.push(this.root)
        while(queue.length){
            let curr = queue.shift()
            console.log(curr.value)
            if(curr.left){
                queue.push(curr.left)
            }
            if(curr.right){
                queue.push(curr.right)
            }
        }
    }

    max(root){
        if(!root.left){
            return root.value
        }else{
            return this.max(root.left)
        }
    }

    min(root){
        if(!root.right) {
            return root.value
        }else{
            return this.min(root.right)
        }
    }
    delete(value){
        this.root = this.deleteNode(this.root , value)
    }

    deleteNode(root, value){
        if(root === null){
            return root
        }
        if( value < root.value){
            root.left = this.deleteNode(root.left , value)
        }else if( value > root.value){
            root.right = this.deleteNode(root.right ,value)
        }else {
        if(!root.left && !root.right){
            return null
        }
        if(!root.left){
            return root.left
        }else if(!root.right){
            return root.left
        }
        root.value = this.max(root.left)
        root.left = this.deleteNode(root.left , root.value);
        }
        return root
    }
    
  }


  class Node {
    constructor(){
        this.value = value
        this.left = null
        this.right = null
    }
  }

  class BinarySearchTree{
    constructor(){
        this.root = null
    }

    isEmpty(){
        return this.root = null
    }

    insert(value){
        const Node = new Node (value)
        if(this.isEmpty()){
            this.root = value
        }else{
            this.insertNode(this.root , node)
        }
    }

    insertNode(root , node){
        if(root.value < node.value){
            if(root.left === null){
                root.left = newNode
            }else{
                this.insertNode(root.left , node)
            }
        }else{
            if(root.right === null){
                root.right = node
            }else{
                this.insertNode(this.right , node)
            }
        }
    }

    search(root , value){
        if(!root){
            return false
        }else{
            if(root.value === value){
                return true
            }else if(root.value < value){
                this.search(root.left , value)
            }else{
                this.search(root.right , value)
            }
        }
    }

    max(root){
        if(!root.left){
            return root.value
        }else{
            return this.max(root.right)
        }
    }

    min(root){
    if(!root.right){
        return root.value
    }else{
        this.min(this.right)
    }
    }

    delete(value){
        this.root = this.deleteNode(this.root , value)
    }

    deleteNode( root , value){
        if(root === null) return true
        if(value < root.value){
            root.left = this.deleteNode(root.left , value);
        }else if(value > root.value){
            root.right = this.deleteNode(root.right , value)
        }else {
            if(!root.left && !root.right){
                return null
            }
            if(!root.left){
                return root.right
            }else if(!root.right){
                return root.left
            }

            root.value = this.max(root.left);
            root.left = this.deleteNode(root.left , root.value)
        }
        return root 
    }

  }


  class Node{
    constructor(value){
        this.value = value
        this.left = null
        this.right = null
    }

  }

  class BinarySearchTree {
    constructor(){
        this.root = null
    }

    isEmpty(){
        return this.root === null

    }

    insert(value){
        const node = new Node(value)
        if(this.isEmpty()){
            this.root = node
        }
        else{
            this.insertNode(this.root , node)
        }
    }
    insertNode(root , node){
        if(root.value < value){
            if(root.left === null){
                root.left = node
            }else{
                this.insertNode(root.left , node)
            }
        }else{
            if(root.value > value){
            if(root.right === null){
                root.right = node
            }else{
                this.insertNode(root.right , node)
            }
        }
    }
    search(root, value){
        if(!root){
            return  false
        }else{
            if(root.value === value){
                return true
            }else if(root.value < value){
                return this.search(root.left , value)
            }else{
                return this.search(root.right , value)
            }
        }
    }
    delete(value){
        this.root = this.deleteNode(this.root , value)
    }
    
  }